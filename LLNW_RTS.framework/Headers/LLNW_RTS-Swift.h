// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef LLNW_RTS_SWIFT_H
#define LLNW_RTS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LLNW_RTS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum LLStatus : NSInteger;
@class LLOptions;
@class LLData;
@class UIView;
enum LLEvent : NSInteger;
@class LLEventParameter;

/// RTS client used to build LLSubscriber and LLPublisher
SWIFT_CLASS("_TtC8LLNW_RTS8LLClient")
@interface LLClient : NSObject
@property (nonatomic) enum LLStatus status;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull renditions;
@property (nonatomic, strong) LLOptions * _Nonnull options;
@property (nonatomic, strong) LLData * _Nonnull data;
@property (nonatomic, strong) UIView * _Nonnull subscribeRenderer;
@property (nonatomic, strong) UIView * _Nonnull publishRenderer;
/// Initialize renderer for RTS. Call <code>.connect(...)</code> afterwards.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize with options already given
- (nonnull instancetype)initWithOptions:(LLOptions * _Nonnull)opts;
/// Assign a callback to be called for a given event. A string ID will be returned that
/// you can use to call <code>.off()</code> if needed.
- (NSString * _Nonnull)onEvent:(enum LLEvent)event :(void (^ _Nonnull)(LLEventParameter * _Nonnull))reference;
/// Using ID provided when calling <code>.on()</code>, stop listening to an event.
- (void)offWithEvent:(enum LLEvent)event :(NSString * _Nonnull)reference;
/// Disconnect websocket and end WebRTC connection
- (void)unsubscribe;
/// Set the rendition to be used. Available renditions will be given to client on <code>.Subscribe_Metadata</code> event.
- (void)setRendition:(NSString * _Nonnull)bitrate;
/// Send a message only to the publisher of the stream.
- (void)sendPublisherMessage:(NSString * _Nonnull)message;
/// Broadcast a message to all users subscribed on a stream.
- (void)sendBroadcastMessage:(NSString * _Nonnull)message;
/// Send a message to one client only.
- (void)sendPrivateMessageTo:(NSArray<NSString *> * _Nonnull)to :(NSString * _Nonnull)message;
@end





SWIFT_CLASS("_TtC8LLNW_RTS6LLData")
@interface LLData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Retrieve a dictionary containing all key-value pairs given in data object.
- (NSDictionary<NSString *, NSString *> * _Nonnull)retrieve SWIFT_WARN_UNUSED_RESULT;
/// Retrieve an item from the data object by requesting the key
- (id _Nonnull)retrieveWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Increment value of key on data object
- (void)incrementWithKey:(NSString * _Nonnull)key increment:(NSInteger)increment createIfKeyMissing:(BOOL)createIfKeyMissing :(void (^ _Nonnull)(BOOL))callback;
/// Decrement value of key on data object
- (void)decrementWithKey:(NSString * _Nonnull)key decrement:(NSInteger)decrement createIfKeyMissing:(BOOL)createIfKeyMissing :(void (^ _Nonnull)(BOOL))callback;
/// Add new property on data object
- (void)addWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value failIfKeyPresent:(BOOL)failIfKeyPresent :(void (^ _Nonnull)(BOOL))callback;
/// Update property on data object
- (void)updateWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value createIfKeyMissing:(BOOL)createIfKeyMissing :(void (^ _Nonnull)(BOOL))callback;
/// Delete a property on the data object
- (void)deleteWithKey:(NSString * _Nonnull)key failIfKeyMissing:(BOOL)failIfKeyMissing :(void (^ _Nonnull)(BOOL))callback;
/// Update list on given key of data object
- (void)listInsertWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value createIfKeyMissing:(BOOL)createIfKeyMissing failIfValuePresent:(BOOL)failIfValuePresent :(void (^ _Nonnull)(BOOL))callback;
/// Remove from list on given key of data object
- (void)listRemoveWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value failIfKeyMissing:(BOOL)failIfKeyMissing failIfValueMissing:(BOOL)failIfValueMissing :(void (^ _Nonnull)(BOOL))callback;
/// Compare and swap value for given key of data object
- (void)swapWithKey:(NSString * _Nonnull)key compare:(id _Nonnull)compare swap:(id _Nonnull)swap createIfKeyMissing:(BOOL)createIfKeyMissing :(void (^ _Nonnull)(BOOL))callback;
@end

/// Note: I cannot use a string enum because it’s not supported in Objective C.
/// Event given by RTS
typedef SWIFT_ENUM(NSInteger, LLEvent, open) {
/// Previous Red5 events to be used in current HTML API https://www.red5pro.com/docs/streaming/subscriber.html#lifecycle-events
  LLEventConnect_Success = 0,
/// ✓
  LLEventConnect_Failure = 1,
/// ✓
  LLEventSubscribe_Start = 2,
/// ✓ <em>Note:</em> Currently using this as “track ready” event from example apps (emitted at same time)
  LLEventSubscribe_Fail = 3,
/// ✓
  LLEventSubscribe_InvalidName = 4,
/// ✓
  LLEventSubscribe_Stop = 5,
/// ✓
  LLEventSubscribe_Metadata = 6,
/// ✓
  LLEventSubscribe_Send_Invoke = 7,
/// … not really useful unless the peer connection opens a data channel
  LLEventSubscribe_Play_Unpublish = 8,
/// ✓
  LLEventSubscribe_Connection_Closed = 9,
  LLEventSubscribe_Orientation_Change = 10,
  LLEventSubscribe_Volume_Change = 11,
/// Is this needed in iOS? Renderer audio already reacts to device volume
  LLEventSubscribe_Time_Update = 12,
/// If using a playhead in the future
  LLEventSubscribe_Playback_Change = 13,
  LLEventSubscribe_FullScreen_Change = 14,
  LLEventSubscribe_Autoplay_Failure = 15,
  LLEventSubscribe_Autoplay_Muted = 16,
  LLEventWebRTC_PeerConnection_Available = 17,
  LLEventWebRTC_Offer_Start = 18,
  LLEventWebRTC_Offer_End = 19,
  LLEventWebRTC_Answer_Start = 20,
  LLEventWebRTC_Answer_End = 21,
  LLEventWebRTC_Candidate_Start = 22,
  LLEventWebRTC_Candidate_End = 23,
  LLEventWebRTC_IceTrickle_Complete = 24,
  LLEventData_New_Message = 25,
  LLEventData_Update = 26,
  LLEventRendition_Changed = 27,
};


SWIFT_CLASS("_TtC8LLNW_RTS16LLEventParameter")
@interface LLEventParameter : NSObject
@property (nonatomic) enum LLEvent event;
@property (nonatomic, copy) NSString * _Nonnull log;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LLSubscriber;
@class LLPublisher;
@class NSUserDefaults;

/// RTS Client with ability to subscribe and publish video. For full instructions
/// and tutorial see <a href="https://support.limelight.com/public/video/en/Content/Resources/PDF/Realtime%20Streaming%20iOS%20SDK%20Quick%20Start.pdf">the official documentation</a>.
/// \code
/// import LLNW_RTS
/// let opts = LLNW_RTS.Options()
/// opts.shortname = "your-shortname"
/// opts.stream = "your-stream"
/// let subscriber = LLNW_RTS.Subscriber(options: opts)
/// subscriber.subscribe()
/// // (next, add video to UI)
///
/// \endcode
SWIFT_CLASS("_TtC8LLNW_RTS8LLNW_RTS")
@interface LLNW_RTS : NSObject
+ (LLSubscriber * _Nonnull)Subscriber SWIFT_WARN_UNUSED_RESULT;
+ (LLSubscriber * _Nonnull)SubscriberWithOptions:(LLOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (LLSubscriber * _Nonnull)SubscriberWithShortname:(NSString * _Nonnull)shortname stream:(NSString * _Nonnull)stream SWIFT_WARN_UNUSED_RESULT;
+ (LLPublisher * _Nonnull)Publisher SWIFT_WARN_UNUSED_RESULT;
+ (LLPublisher * _Nonnull)PublisherWithOptions:(LLOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (LLOptions * _Nonnull)Options SWIFT_WARN_UNUSED_RESULT;
+ (LLOptions * _Nonnull)OptionsWithSettings:(NSUserDefaults * _Nonnull)settings key:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User-provided options to be used throughout RTS framework
SWIFT_CLASS("_TtC8LLNW_RTS9LLOptions")
@interface LLOptions : NSObject
/// Shortname as provisioned
@property (nonatomic, copy) NSString * _Nonnull shortname;
/// The stream you’d like to use with your shortname
@property (nonatomic, copy) NSString * _Nonnull stream;
/// The host to which you’d like to subscribe. If publishing video, this will become either
/// your primary or backup host.
@property (nonatomic, copy) NSString * _Nonnull hostname;
/// If you are using MediaVault, enter your validation URL.
@property (nonatomic, copy) NSString * _Nonnull validationURL;
@property (nonatomic) BOOL secure;
@property (nonatomic) NSInteger port;
@property (nonatomic) BOOL autoplay;
@property (nonatomic) BOOL muted;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Set the provisioned rendition that you’d like to use with your shortname/stream
@property (nonatomic, copy) NSString * _Nonnull rendition;
/// Username for publishing video
@property (nonatomic, copy) NSString * _Nonnull username;
/// Password for publishing video
@property (nonatomic, copy) NSString * _Nonnull password;
/// Selected camera for publishing video (either “front” or “back”)
@property (nonatomic, copy) NSString * _Nonnull camera;
/// Given URL for publishing video. This URL should start with <code>wss://</code> and includes
/// your shortname and stream. This will override options: <code>.shortname</code>, <code>.stream</code>, and <code>.hostname</code>.
@property (nonatomic, copy) NSString * _Nonnull publishURL;
/// Initialize with default settings. It is assumed that user will either provide account/stream on client init
/// or they will change the account/stream properties after initializing options.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// If given <code>UserDefaults.standard</code>, then read settings given and set.
/// <em>Note</em>: If a new propery it added, update <code>init()</code> and the <code>valid()</code> method
- (nonnull instancetype)initWithSettings:(NSUserDefaults * _Nonnull)settings key:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LLNW_RTS11LLPublisher")
@interface LLPublisher : LLClient
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize with options already given
- (nonnull instancetype)initWithOptions:(LLOptions * _Nonnull)opts;
/// Start an ingest (options given on or shortly after <code>.init()</code>)
- (void)startIngest;
/// Stop a running ingest.
- (void)stopIngest;
@end

typedef SWIFT_ENUM(NSInteger, LLStatus, open) {
  LLStatusSubscribed = 0,
  LLStatusSubscribing = 1,
  LLStatusUnsubscribed = 2,
  LLStatusPublishing = 3,
  LLStatusNot_publishing = 4,
};


SWIFT_CLASS("_TtC8LLNW_RTS12LLSubscriber")
@interface LLSubscriber : LLClient
/// Initialize with given shortname and stream (assume default options, unless given optional options argument)
- (nonnull instancetype)initWithShortname:(NSString * _Nonnull)shortname stream:(NSString * _Nonnull)stream;
/// Initialize with options already given
- (nonnull instancetype)initWithOptions:(LLOptions * _Nonnull)opts;
/// Begin subscribing (options given on or shortly after <code>.init()</code>)
- (void)subscribe;
/// Convenience method to subscribe with given account and stream
- (void)subscribeWithShortname:(NSString * _Nonnull)shortname stream:(NSString * _Nonnull)stream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
